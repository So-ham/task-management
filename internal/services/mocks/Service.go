// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "task-management/internal/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, req
func (_m *Service) CreateTask(ctx context.Context, req *entities.TaskRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.TaskRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *Service) DeleteTask(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: ctx, page, pageSize, status
func (_m *Service) GetAllTasks(ctx context.Context, page int, pageSize int, status *entities.TaskStatus) ([]*entities.TaskResponse, error) {
	ret := _m.Called(ctx, page, pageSize, status)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*entities.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *entities.TaskStatus) ([]*entities.TaskResponse, error)); ok {
		return rf(ctx, page, pageSize, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *entities.TaskStatus) []*entities.TaskResponse); ok {
		r0 = rf(ctx, page, pageSize, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *entities.TaskStatus) error); ok {
		r1 = rf(ctx, page, pageSize, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: ctx, id
func (_m *Service) GetTaskByID(ctx context.Context, id uuid.UUID) (*entities.TaskResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *entities.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.TaskResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.TaskResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, id, req
func (_m *Service) UpdateTask(ctx context.Context, id uuid.UUID, req *entities.TaskRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entities.TaskRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
